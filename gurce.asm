"; gurce's asm string trimming routines"
"; ------------------------------------"
";"
"; used to try speed up eleven's - '11.parse' basic string trimming routines"
""
"farRptra = $fb"
"farRptrb = $e0"
""
"             .bank 4"
"             *=$2000 ; so it doesn't collide with mega assembler in bank0"
""
"             sei"
""
"             ; === back up a few zpage registers ==="
"             lda farRptrb"
"             sta zpageRbackup"
"             lda farRptrb+1"
"             sta zpageRbackup+1"
"             lda farRptrb+2"
"             sta zpageRbackup+2"
"             lda farRptrb+3"
"             sta zpageRbackup+3"
""
"             ; === init dummy tr$ ==="
"             lda trRptr"
"             sta len"
"             ldx trRptr+1"
"             ldy trRptr+2"
"             lda #<trRstr"
"             ldz #>trRstr"
"             jsr initRdummyRstring"
""
"             ; === init dummy s$ ==="
"             lda sRptr"
"             sta len"
"             ldx sRptr+1"
"             ldy sRptr+2"
"             lda #<sRstr"
"             ldz #>sRstr"
"             jsr initRdummyRstring"
""
"             ; === restore backed up zpage registers ==="
"             lda zpageRbackup"
"             sta farRptrb"
"             lda zpageRbackup+1"
"             sta farRptrb+1"
"             lda zpageRbackup+2"
"             sta farRptrb+2"
"             lda zpageRbackup+3"
"             sta farRptrb+3"
""
"             cli"
"             rts"
""
""
"initRdummyRstring ; (in: varRptr - x=lo byte, y=hi byte)"
";---------------- ; (in: strRptr - a=lo byte, z=hi byte)"
"             ; === push az to stack ==="
"             pha"
"             tza"
"             pha"
""
"             ; === farRptra = bank1 : varRptr ==="
"             stx farRptra"
"             sty farRptra+1"
"             lda #$01"
"             sta farRptra+2"
"             lda #$00"
"             sta farRptra+3"
""
"             ; === pop za so farRptr2 = bank0 : strRptr ==="
"             pla"
"             taz"
"             pla"
"             sta farRptrb"
"             stz farRptrb+1"
"             lda #$04"
"             sta farRptrb+2"
"             lda #$00"
"             sta farRptrb+3"
""
"             ; === prepare indices ==="
"             ldy len"
"             dey"
"             tya"
"             taz"
""
"lp3          ; === copy string content across ==="
"             lda [farRptrb],z"
"             sta [farRptra],z"
""
"             dez"
"             bpl lp3"
""
"             rts"
""
"             lda trRstr"
"             ldy trRptr         ; y = strlen(tr$)"
"             sty $0800"
"             rts"
""
"stripRtrRfromRleft"
"             ; do while instr(tr$,(left$(s$,1)))"
"lp1          jsr isRinstrRtrRleft"
"             bne bailRout"
""
"               ; s$=mid$(s$,2)"
"               jsr shrinkRstRleft"
""
"             jmp lp1"
""
"bailRout     rts"
""
"stripRtrRfromRright"
"             ; do while instr(tr$,(right$(s$,1))"
"lp2          jsr isRinstrRtrRright"
"             bne bailRout"
""
"               ; s$=left$(s$,len(s$)-1)"
"               jsr shrinkRstRright"
""
"             jmp lp2"
"             rts"
""
"isRinstrRtrRleft"
"             rts"
""
""
"isRinstrRtrRright"
"             rts"
""
"shrinkRstRleft"
"             rts"
""
"shrinkRstRright"
"             rts"
""
""
"; dummy variables for testing routine"
"; -----------------------------------"
""
"trRptr       .byte 2      ; the length of the string"
"             .word $1500  ; pointer to bank1 string contents"
""
"trRstr       .text ' :'"
"             .byte 0"
""
"sRptr        .byte 17     ; length"
"             .word $1600  ; pointer to bank1 string contents"
"sRstr        .text '  hello world::  '"
"             .byte 0"
"len          .byte 0"
"zpageRbackup .byte 0, 0, 0, 0"
""
*
