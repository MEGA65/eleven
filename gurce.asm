"; gurce's asm string trimming routines"
"; ------------------------------------"
";"
"; used to try speed up eleven's - '11.parse' basic string trimming routines"
""
"farRptra = $fb"
"farRptrb = $e0"
""
"             .bank 4"
"             *=$2000 ;,'gurce'"
""
"             ; basic needs to feed in pointers to tr$ and s$ here"
"             ; --------------------------------------------------"
"pRtr         .word 0"
"pRs          .word 0"
""
"             ; jump table of routines"
"             ; ----------------------"
"             jmp stripRleft"
"             jmp stripRright"
""
"stripRleft"
";---------"
"             sei"
""
"             jsr backupRzpage"
"             jsr initRfarRpointerRbanks"
"             jsr stripRtrRfromRleft"
"             jsr restoreRzpage"
""
"             cli"
"             rts"
""
"stripRright"
";----------"
"             sei"
""
"             jsr backupRzpage"
"             jsr initRfarRpointerRbanks"
"             jsr stripRtrRfromRright"
"             jsr restoreRzpage"
""
"             cli"
"             rts"
""
"initRfarRpointerRbanks"
";---------------------"
"             lda #$01"
"             sta farRptra+2"
"             lda #$00"
"             sta farRptra+3"
""
"             lda #$00"
"             sta farRptrb+2"
"             lda #$00"
"             sta farRptrb+3"
"             rts"
""
"backupRzpage"
";-----------"
"             lda farRptrb"
"             sta zpageRbackup"
"             lda farRptrb+1"
"             sta zpageRbackup+1"
"             lda farRptrb+2"
"             sta zpageRbackup+2"
"             lda farRptrb+3"
"             sta zpageRbackup+3"
"             rts"
""
"restoreRzpage"
";------------"
"             lda zpageRbackup"
"             sta farRptrb"
"             lda zpageRbackup+1"
"             sta farRptrb+1"
"             lda zpageRbackup+2"
"             sta farRptrb+2"
"             lda zpageRbackup+3"
"             sta farRptrb+3"
"             rts"
""
""
"stripRtrRfromRleft"
";-----------------"
"             ; do while instr(tr$,(left$(s$,1)))"
"lp1          jsr isRinstrRtrRleft"
"             bcc bailRout"
""
"               ; s$=mid$(s$,2)"
"               jsr shrinkRstRleft"
""
"             jmp lp1"
""
"bailRout     rts"
""
"stripRtrRfromRright"
";------------------"
"             ; do while instr(tr$,(right$(s$,1))"
"lp2          jsr isRinstrRtrRright"
"             bcc bailRout"
""
"               ; s$=left$(s$,len(s$)-1)"
"               jsr shrinkRstRright"
""
"             jmp lp2"
"             rts"
""
"isRinstrRtrRleft"
";---------------"
"             ldx pRs"
"             ldy pRs+1"
"             jsr loadRstringRtoRfarRptrs"
""
"             ldz #$00"
"             lda [farRptra],z"
"             jsr isRinstrRtr"
"             rts"
""
""
"isRinstrRtrRright"
";----------------"
"             ldx pRs"
"             ldy pRs+1"
"             jsr loadRstringRtoRfarRptrs"
"             ldz len"
"             dez"
"             lda [farRptra],z"
"             jsr isRinstrRtr"
"             rts"
""
""
"loadRxyRtoRfarRptra"
";------------------"
"             stx farRptra"
"             sty farRptra+1"
"             rts"
""
""
"loadRxyRtoRfarRptrb"
";------------------"
"             stx farRptrb"
"             sty farRptrb+1"
"             rts"
""
"loadRstringRtoRfarRptrs"
";----------------------"
"; in: xy = ptr to basic string"
"; out: farRptrb = string details"
";      farRptra = string contents"
"             jsr loadRxyRtoRfarRptrb"
"             ldz #$00"
"             lda [farRptrb],z"
"             sta len"
"             inz"
"             lda [farRptrb],z"
"             tax"
"             inz"
"             lda [farRptrb],z"
"             tay"
"             jsr loadRxyRtoRfarRptra"
"             rts"
""
"isRinstrRtr  ; a=char value to assess"
";----------"
"             sta chr"
"             ldx pRtr"
"             ldy pRtr+1"
"             jsr loadRstringRtoRfarRptrs"
""
"             ldz len"
"             dez"
""
"instrRloop"
"             lda [farRptra],z"
"             cmp chr"
"             beq inRfound"
"             dez"
"             bpl instrRloop"
""
"             clc"
"             rts"
"inRfound"
"             sec"
"             rts"
""
"shrinkRstRleft"
";-------------"
"             ldx pRs"
"             ldy pRs+1"
"             jsr loadRstringRtoRfarRptrs"
"             dec len"
"             lda len"
"             ldz #$00"
"             sta [farRptrb],z  ; length"
"             clc"
"             ldz #$01"
"             lda [farRptrb],z"
"             adc #$01"
"             sta [farRptrb],z"
"             bcc shrinkRbail"
"             inz"
"             lda #$00"
"             adc [farRptrb],z"
"             sta [farRptrb],z"
""
"shrinkRbail"
"             rts"
""
"shrinkRstRright"
";--------------"
"             ldx pRs"
"             ldy pRs+1"
"             jsr loadRstringRtoRfarRptrs"
"             dec len"
"             lda len"
"             ldz #$00"
"             sta [farRptrb],z  ; length"
""
"             rts"
""
""
"; variables"
"; ---------"
"len          .byte 0"
"chr          .byte 0"
"zpageRbackup .byte 0, 0, 0, 0"
""
*
