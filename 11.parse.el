#OUTPUT "11.PARSE-NEW"' ¬¡ŒÀ4 ÕEMORY USAGE  (AKA 'ÕAILBOX “¡Õ')' ------------------' 4.∆∆00  "SK" MAGIC SIGNATURE (”TEPHAN ÀLEINERT / UBIK'S INITIALS)' 4.∆∆02  BORDER COLOUR' 4.∆∆03  BACKGROUND COLOUR' 4.∆∆04  FOREGROUND COLOUR' 4.∆∆05  HIGHLIGHT COLOUR' 4.∆∆06  STATUS BAR COLOUR' 4.∆∆07  MISC. FLAGS'         - BIT0: AUTOLOAD SOURCE ENABLE FLAG'         - BIT1: AUTOJUMP TO LINE FLAG'         - BIT2: AUTOBACKUP FLAG'         - BIT3: VERBOSE FLAG'         - BIT4: TEXT-MODE (0=80X25, 1=80X50)'         - BIT5-7: RESERVED' 4.∆∆08  ERROR NUMBER TO BE DISPLAYED (>128 ARE PREPROCESSOR ERRORS)' 4.∆∆09  (2 BYTES) LINE NUMBER FOR AUTOJUMP'' 4.∆∆10  CURRENT FILE NAME' 4.∆∆20  OUTPUT FILE NAME'' 4.∆∆30- RESERVED' 4.∆∆7∆'' ¡TTIC “¡Õ CACHE USAGE' =====================' $800,0000 +---------------+'           ! 11.≈ƒ…‘       ! (MAX 53KB)' $801,0000 +---------------+'           ! 11.–¡“”≈      ! (MAX 53KB)' $802,0000 +---------------+'           ! 11.”≈‘‘…Œ«”   ! (8KB)' $802,2000 +---------------+'           ! 11.‘œÀ≈Œ…⁄≈   ! (8KB)' $802,4000 +---------------+'           ! 11.–œ”‘       ! (8KB)' $802,6000 +---------------+' ' $803,0000 +---------------+'           ! ≈Ã≈÷≈Œ ”œ’“√≈ !'       ... +---------------+' ≈Ã≈÷≈Œ ”œ’“√≈ ”‘œ“¡«≈ ∆œ“Õ¡‘:' ----------------------------' $803,0000  ◊œ“ƒ       ‘OTAL ÃINES' $803,0002  ¬Ÿ‘≈       ÃINE 1 LENGTH' $803,0003  ¬Ÿ‘≈[Ã≈Œ]  √HARS FOR ÃINE 1' $803,00XX  ¬Ÿ‘≈       ÃINE 2 LENGTH' $803,00YY  ¬Ÿ‘≈[Ã≈Œ]  √HARS FOR ÃINE 2' ...'-------.DEFINES'-------#DEFINE ‘Ÿ–Ø“≈¡Ã = 0#DEFINE ‘Ÿ–Ø…Œ‘ = 1#DEFINE ‘Ÿ–Ø”‘“ = 2#DEFINE ‘Ÿ–Ø¬Ÿ‘≈ = 3#DEFINE ‘Ÿ–Øƒ≈∆ = 4  CLR#DECLARE DBLØQUOTE$, PARSERØFILE$, T$, BLANKØLINE$, TYPEØIDENT$#DECLARE CURRØSRCØLINE$, NEXTØLINEØFLAG, NEXTØLINE$#DECLARE MK$, DBLØQUOTEØCHAR, SNGLØQUOTEØCHAR#DECLARE TOKENS$(10), DUMBØCMDS$, I#DECLARE BINØCONV(16)  ' BIT SHIFTER'S FAST BINARY CONVERSION#DECLARE MAPØDESTØTOØSRCØLINENO%(1000) ' DEST FILE LINE NR --> SRC FILE LINE NR#DECLARE DESTØLINE$(1000)              ' POST PROCESSED LINES#DECLARE ELEMENTØCNT(4)                ' ELEMENT COUNT PER TYPE#DECLARE VARØTABLE$(4,200)             ' VARIABLE TABLE PER TYPE#DECLARE DEFINEØVAL$(200)              ' DEFINE VALUES TABLE#DECLARE LABELØNAME$(200)              ' LABEL TABLE#DECLARE LABELØLINENO(200)#DECLARE LABELØCNT=0#DECLARE ARGS$(32)                     ' ARGUMENT LIST#DECLARE STRUCTØNAME$(30)#DECLARE STRUCTØFIELDS$(30)#DECLARE STRUCTØVARS$(30)              ' STRUCT VARS (EACH ENTRY HAS STRING OF VARS)#DECLARE STRUCTØIDX=0                  ' INDEX TO NEXT FREE STRUCT DEFINITION#DECLARE WHITESPACE$, SRCØLINENO, CURØSRCØLINENO, CB#DECLARE CURRØATTICØADDR, TOTALØLINES, S$, DELETEØLINEØFLAG#DECLARE VERBOSE, DESTØLINENO, INSIDEØIFDEF, Z$, CURRØDESTØLINE$#DECLARE CURØDESTØLINENO, S1, S2, C$, R, F$, DEFINEØFLAG, D$#DECLARE IGNOREØBRACKETS, ARGØCNT, PARSERØERROR$, P$#DECLARE DIMENSION$, VALUE$, BKTØOPENØIDX, BKTØCLOSEØIDX, EQUALSØIDX#DECLARE TR$, HX$, BI$, PP$, DZ, TY, ID, VN$, OF$#DECLARE ARGSØLIST$, ARGSØLISTØLEN, IG, AI, B$, QUOTEØFLAG#DECLARE A$, TG, CX$, II, RI, DR, T, LC$, CI, BR, B, BC$, VL#DECLARE N1, N2, BA, A, AD, TF$, ZZ, K, SF$, SF#DECLARE CURØLINEØLEN, SRCØLINEØPTR, SRCØLINEBUFFØPTR, CUTØTAILØIDX#DECLARE CURØLINEØLENØMINUSØONE, CURØLINEBUFFØADDR, CHR#DECLARE CO$, ZI, SK$, BL, SZ, SR, SM, ZZ$#DECLARE CONTØNEXTØLINEØFLAG.MAIN'----  PARSERØFILE$ = "11.PARSE"  MK$ = "@~"  ' @ AND PI  DBLØQUOTE$ = CHR$(34)  DBLØQUOTEØCHAR = 34  SNGLØQUOTEØCHAR = 39  KEY ON  PRINT "≈Ã≈÷≈Œ PREPROCESSOR V0.6.0í"  PRINT  KEY 7, "SCRATCH" + DBLØQUOTE$ + PARSERØFILE$ + DBLØQUOTE$ + ":DSAVE" + DBLØQUOTE$ + PARSERØFILE$ + DBLØQUOTE$ + ":DVERIFY" + DBLØQUOTE$+PARSERØFILE$  T$="                                                                               "  BLANKØLINE$ = T$ + T$ + T$  T$ = ""TOKENS$(0)=" PRINT INPUT IF THEN ELSE DO LOOP WHILE UNTIL GOSUB GOTO OPEN CLOSE DOPEN DCLOSE FOR NEXT GETKEY HEX$ DIM PEEK POKE WAIT DEC CHR$ ASC SGN SQR STR$"  TOKENS$(0) = TOKENS$(0) + " GRAPHIC CLR SCREEN DEF BEGIN BEND LEN MID$ RIGHT$ LEFT$ INSTR FOR NEXT STEP TRAP BORDER AND FOREGROUND "  TOKENS$(1) = " BACKGROUND SET ABS SIN COS TAN LOG FRE CURSOR PIXEL WINDOW RWINDOW LINE BOX CIRCLE ELLIPSE PALETTE RESTORE DATA ERR$ ER EL CURSOR ON OFF"  TOKENS$(1) = TOKENS$(1) + " VAL SCRATCH RETURN RND STOP BANK TI DO OR ST IF EL ER ON TO PEN GET END INT NOT DS RUN USING DOT "  TOKENS$(2) = " APPEND ATN AUTO BACKUP BLOAD BOOT BSAVE BUMP BVERIFY CATALOG CHANGE CHAR CMD COLLISION COLOR CONCAT CONT COPY WPOKE WPEEK SETBIT CLRBIT "  TOKENS$(3) = " DCLEAR DEFFN DELETE FN DIR DISK DLOAD DMA DMODE DPAT DSAVE DVERIFY EDMA ENVELOPE ERASE EXIT EXP FAST FILTER FIND GO64 HEADER HELP HIGHLIGHT "  TOKENS$(4) = " JOY LIST LOAD LOCATE LPEN MOD MONITOR MOUSE MOVSPR NEW PAINT PLAY POINTER POLYGON POS POT PUDEF "  TOKENS$(5) = " RCOLOR RDOT READ RECORD REM RENAME RESUME RGR RMOUSE RPLAY RREG RSPCOLOR RSPPOS RSPRITE SAVE SCNCLR SLEEP SLOW SOUND SPC SPRCOLOR "  TOKENS$(6) = " SPRITE SPRSAV SYS TAB TEMPO TROFF TRON TYPE USR VERIFY VOL XOR KEY VSYNC RCURSOR T@& C@& RGRAPHIC FREAD POINTER "  DUMBØCMDS$ = " BLOAD BSAVE DLOAD TO SAVE DIR COLLECT DOPEN DCLOSE BACKUP FREAD GET "  GOSUB GETØFILENAME  BANK 128  TYPEØIDENT$(‘Ÿ–Ø“≈¡Ã)=""  TYPEØIDENT$(‘Ÿ–Ø…Œ‘)="%"  TYPEØIDENT$(‘Ÿ–Ø”‘“)="$"  TYPEØIDENT$(‘Ÿ–Ø¬Ÿ‘≈)="&"  BINØCONV(0) = 1  FOR I = 1 TO 16    BINØCONV(I) = BINØCONV(I - 1) + BINØCONV(I - 1)  NEXT I' ------------------------- PASS 1 ------------------------------------.PASSØ1'------  NEXTØLINEØFLAG = 0  WHITESPACE$ = CHR$(32) + CHR$(160) + "	"  ' CLEANUP TEMPORARY FILES  SRCØLINENO = 0  PRINT "PASS 1 ";  CURØSRCØLINENO=0  CLR TI  ' KEEP START TIME FOR TIMING  CB = $8030000   ' ELEVEN SOURCE TO BE COMPILED IS LOCATED HERE IN ATTIC RAM  CURRØATTICØADDR = CB  TOTALØLINES = WPEEK(CURRØATTICØADDR)  CURRØATTICØADDR = CURRØATTICØADDR + 2  DO WHILE CURØSRCØLINENO <> TOTALØLINES  ' UNTIL TARGET LINES IS REACHED    GOSUB READØNEXTØLINE    GOSUB SINGLEØQUOTEØCOMMENTØTRIM    ' STRIP WHITESPACE FROM END    S$ = CURRØSRCØLINE$    GOSUB STRIPØCHARACTERS    CURRØSRCØLINE$ = S$    IF CURRØSRCØLINE$ <> "" THEN BEGIN      DELETEØLINEØFLAG = 0      IF VERBOSE THEN PRINT ">> ƒ≈”‘:" DESTØLINENO;", ”“√: "; SRCØLINENO;": "; CURRØSRCØLINE$      IF LEFT$(CURRØSRCØLINE$, 1) = "." THEN BEGIN        NEXTØLINEØFLAG = 1        GOSUB ADDØTOØLABELØTABLE      BEND      IF LEFT$(CURRØSRCØLINE$, 1) = "#" THEN BEGIN        GOSUB PARSEØPREPROCESSORØDIRECTIVE      BEND      IF INSIDEØIFDEF = 1 THEN GOTO PARSERØLOOPØSKIP      IF LEFT$(CURRØSRCØLINE$, 4) = "DATA" OR RIGHT$(CURRØSRCØLINE$, 5) = "BEGIN" THEN BEGIN        NEXTØLINEØFLAG = 1      BEND      IF DELETEØLINEØFLAG = 0 THEN BEGIN        IF VERBOSE = 0 THEN PRINT ".";        S$ = CURRØSRCØLINE$        GOSUB REPLACEØVARSØANDØLABELS        GOSUB CHECKØFORØCREATIONØOFØSTRUCTØOBJECT        GOSUB CHECKØFORØCONTINUEØONTOØNEXTØLINE        ' SAFE ADD CURRØDESTØLINE$+S$ TO CURRENT OR NEXT DESTØLINE$(DESTØLINENO)        GOSUB SAFEØADDØTOØCURRENTØORØNEXTØLINE        IF RIGHT$(S$, 4) = "BEND" OR RIGHT$(S$, 6) = "RETURN" _           OR LEFT$(S$, 2) = "IF" THEN BEGIN          NEXTØLINEØFLAG = 1        BEND      BEND  ' ENDIF DELETEØLINEØFLAG = 0    BEND  ' ENDIF CURRØSRCØLINE$ <> "".PARSERØLOOPØSKIP    ' INCREASE SOURCE CODE LINE (FOR ERROR MSGS...)    SRCØLINENO = SRCØLINENO + 1    IF VERBOSE THEN BEGIN      PRINT "SRCØLINENO="; SRCØLINENO      GET KEY Z$    BEND  LOOP    IF CURRØDESTØLINE$ <> "" THEN BEGIN    DESTØLINE$(DESTØLINENO) = CURRØDESTØLINE$    DESTØLINENO = DESTØLINENO + 1  BEND  CLOSE 1  GOSUB SAVEØFILENAME  ' SET OUTPUT FILENAME  SCRATCH "11TEMP"  SCRATCH "11TOKENIZED"' ------------------------- PASS 2 ------------------------------------.PASSØ2'------  OPEN 1,1,5,"11TEMP,S,W"  PRINT CHR$(13) "PASS 2 ";  FOR CURØDESTØLINENO = 0 TO DESTØLINENO - 1    S$ = DESTØLINE$(CURØDESTØLINENO)    IF VERBOSE THEN PRINT CURØDESTØLINENO; "û=> " S$ : ELSE PRINT ".";    DO WHILE INSTR(S$, MK$) <> 0       S1 = INSTR(S$, MK$) : S2 = INSTR(S$, MK$, S1 + 2)       IF S2 = 0 THEN BEGIN         EXIT  ' EXIT LOOP FOR CASES WHERE A PI SYMBOL WAS USED IN THE SOURCE       BEND:ELSE BEGIN         C$ = MID$(S$, S1 + 2, S2 - S1 - 2)         GOSUB SWAPØOUTØLABELØINØC$ØFORØLINENO         S$ = LEFT$(S$, S1 - 1) + C$ + MID$(S$, S2 + 2)       BEND    LOOP    IF VERBOSE THEN PRINT "<= "; STR$(CURØDESTØLINENO) + S$    PRINT #1, STR$(CURØDESTØLINENO) + " " + S$  NEXT CURØDESTØLINENO  GOSUB DUMPØVARS  FOR R = 0 TO 10    PRINT #1, STR$(32000 + R)  NEXT R  ' REMOVE 11.TOKENISE.BAS LINES?  F$ = "D√:D”" + DBLØQUOTE$ + "11TOKENIZED" + DBLØQUOTE$  F$ = F$ + ":IFDS<>0THEN?" + DBLØQUOTE$ + "DISC ERROR: "  F$ = F$ + DBLØQUOTE$ + ";DS$:ELSE?" + DBLØQUOTE$  F$ = F$ + ""  F$ = F$ + DBLØQUOTE$ + ":DÃ" + DBLØQUOTE$ + "11.POST"  PRINT #1, F$  CLOSE 1  PRINT""  PRINT "ELAPSED TIME:"; TI; "TICKS"  PRINT"ìEDMA 0,$1FFF,$8022000,$2001:NEW RESTORE"  PRINT"RUN";  ' LOAD '11.TOKENIZE' FROM CACHE  BANK 128  POKE 208,2      ' NO# OF CHARS IN KEYBOARD BUFFER  POKE 688,13,13  ' RETURN CHARS  END.DECLAREØS$ØVAR'--------------  ' DECLARE VAR(S) IN S$  S$ = MID$(CURRØSRCØLINE$, 10 - DEFINEØFLAG)  D$ = ",;"  IGNOREØBRACKETS = 1  GOSUB PARSEØARGUMENTS  IGNOREØBRACKETS = 0  ' SPLIT PARAMETERS  NEXTØLINE$ = ""  ' NEW LINE IF DIMENSIONING...  IF ARGØCNT < 0 THEN BEGIN    PARSERØERROR$ = "?DECLARE PARAMETER MISSING IN LINE " + STR$(SRCØLINENO)    GOTO RETURNØTOØEDITORØWITHØERROR  BEND  FOR I = 0 TO ARGØCNT    P$ = ARGS$(I)    GOSUB PARSEØDECLAREDØVAR  NEXT I  IF NEXTØLINE$ <> "" THEN BEGIN    DELETEØLINEØFLAG = 0    CURRØSRCØLINE$ = "^^" + NEXTØLINE$  BEND : ELSE BEGIN    DELETEØLINEØFLAG = 1  BEND  RETURN.PARSEØDECLAREDØVAR'------------------  DIMENSION$ = ""  VALUE$ = ""  BKTØOPENØIDX = INSTR(P$, "(")  BKTØCLOSEØIDX = INSTR(P$, ")")  EQUALSØIDX = INSTR(P$, "=")  IF EQUALSØIDX <> 0 THEN BEGIN  ' --- ASSIGNMENT    VALUE$ = MID$(P$, EQUALSØIDX + 1)    P$ = LEFT$(P$, EQUALSØIDX - 1)    TR$ = WHITESPACE$    S$ = P$    GOSUB STRIPØCHARACTERS    P$=S$    S$ = VALUE$    GOSUB STRIPØTR$ØFROMØBEGINNING    GOSUB STRIPØCHARACTERS    VALUE$ = S$    IF LEFT$(VALUE$, 1) = "$" THEN BEGIN      HX$ = MID$(VALUE$, 2)      GOSUB CONVERTØHEX      VALUE$ = C$    BEND    IF LEFT$(VALUE$, 1) = "%" THEN BEGIN      BI$ = MID$(VALUE$, 2)      GOSUB CONVERTØBINARY      VALUE$ = C$    BEND  BEND  IF BKTØOPENØIDX <> 0 AND BKTØCLOSEØIDX <> 0 THEN BEGIN  ' --- DIMENSION    DIMENSION$ = MID$(P$, BKTØOPENØIDX + 1, BKTØCLOSEØIDX - BKTØOPENØIDX - 1)    PP$ = LEFT$(P$, BKTØOPENØIDX - 1)    S$ = DIMENSION$    DZ = 1    GOSUB REPLACEØVARSØANDØLABELS    DZ = 0    DIMENSION$ = S$    P$ = PP$  ' CHECK FOR DEFINE TOKENS    DELETEØLINEØFLAG = 0  BEND  TY = 0  ' VAR TYPE  T$ = RIGHT$(P$, 1)  ' TYPE (IF ANY) IN T$  IF VERBOSE THEN BEGIN    PRINT "ADDING ";  BEND  IF INSTR("%&$", T$) = 0 THEN BEGIN    T$ = ""    TY = 0  BEND  IF DEFINEØFLAG = 1 THEN BEGIN    TY = 4  BEND  IF T$ = "%" THEN BEGIN    TY=1  BEND  IF T$ = "$" THEN BEGIN    TY = 2  BEND  IF T$ = "&" THEN BEGIN    TY = 3  BEND  VARØTABLE$(TY, ELEMENTØCNT(TY)) = P$  IF DIMENSION$ <> "" THEN BEGIN    ID = ELEMENTØCNT(TY)    GOSUB GENERATEØVARNAME  ' FETCH VARNAME IN VN$    IF DEFINEØFLAG = 0 THEN BEGIN      NEXTØLINE$ = NEXTØLINE$ + "DIM " + VN$ + T$ + "(" + DIMENSION$ + "):"    BEND  BEND  IF VALUE$ <> "" THEN BEGIN    ID = ELEMENTØCNT(TY)    GOSUB GENERATEØVARNAME     IF DEFINEØFLAG=0 THEN BEGIN      NEXTØLINE$ = NEXTØLINE$ + VN$ + T$ + "=" + VALUE$ + ":"    BEND  BEND  IF DEFINEØFLAG = 1 THEN BEGIN    DEFINEØVAL$(ELEMENTØCNT(TY)) = VALUE$  BEND  IF VERBOSE THEN BEGIN    PRINT P$; "í: "; ELEMENTØCNT(TY)  BEND  ELEMENTØCNT(TY) = ELEMENTØCNT(TY) + 1  RETURN.SETØOUTPUTØFILE'---------------  S$ = MID$(CURRØSRCØLINE$, 8)  D$ = ",;"  GOSUB PARSEØARGUMENTS  IF ARGØCNT <> 0 THEN BEGIN    PRINT "?INVALID PARAMETERS IN LINE ";SRCØLINENO    END  BEND  S$ = ARGS$(0)  TR$ = DBLØQUOTE$  GOSUB STRIPØTR$ØFROMØBEGINNING  GOSUB STRIPØCHARACTERS  ' QUOTES LEFT & RIGHT  IF VERBOSE THEN BEGIN    PRINT "SETTING OUTPUT FILE TO " + S$ + "í"  BEND  OF$ = S$  DELETEØLINEØFLAG = 1  ' DISABLE PASSTHROUGH  RETURN.ADDØTOØLABELØTABLE'------------------  IF VERBOSE THEN BEGIN    PRINT "LABEL "; CURRØSRCØLINE$; " AT LINE "; DESTØLINENO  BEND  DELETEØLINEØFLAG = 1  LABELØNAME$(LABELØCNT) = MID$(CURRØSRCØLINE$, 2)  LABELØLINENO(LABELØCNT) = DESTØLINENO + 1  LABELØCNT = LABELØCNT + 1  ' INCREASE LABEL COUNT  RETURN.RETURNØTOØEDITORØWITHØERROR'---------------------------  BANK 4  ' SET ERROR MAILBOX FLAG  FOR R=1 TO LEN(PARSERØERROR$)    POKE $4FF30 + R - 1, ASC(MID$(PARSERØERROR$, R, 1))  NEXT R  POKE $4FF30 + R - 1, 0  POKE $FF09, MOD(SRCØLINENO, 256)  POKE $FF0A, SRCØLINENO / 256  POKE $FF07, PEEK($FF07) OR 2  ' SET AUTOJUMP FLAG  DCLOSE  GOTO CHAINØEDITOR.STRIPØTR$ØFROMØBEGINNING'------------------------  ' -- STRIP TR$ FROM BEGINNING OF STRING IN S$ --  DO WHILE INSTR(TR$, (LEFT$(S$, 1)))    S$ = MID$(S$, 2)  LOOP  RETURN.STRIPØCHARACTERS'----------------  ' -- STRIP CHARACTERS IN TR$ FROM END OF S$ --  DO WHILE INSTR(TR$, RIGHT$(S$, 1))    S$ = LEFT$(S$, LEN(S$) - 1)  LOOP  RETURN.PARSEØARGUMENTS'---------------  ' -- PARSE ARGUMENTS --  '     IN: S$ = STRING, D$=DELIMITER  '    OUT: ARGS$(X)=ARGUMENT LIST, ARGØCNT=ARGUMENT COUNT  '         ARGS$(0)=FIRST ARG, ARGS$(1)=SECOND ARG...    ARGØCNT = 0  ARGSØLIST$ = S$  ARGSØLISTØLEN = LEN(S$)  IG=0  IF ARGSØLISTØLEN = 0 THEN BEGIN    ARGØCNT = -1    RETURN  ' NO STRING  BEND  FOR AI=0 TO 31    ARGS$(AI) = ""  NEXT AI  FOR AI = 1 TO ARGSØLISTØLEN  B$ = MID$(ARGSØLIST$, AI, 1)  IF B$ = "(" AND IGNOREØBRACKETS = 1 THEN IG = 1  IF B$ = ")" AND IGNOREØBRACKETS = 1 THEN IG = 0  IF INSTR(D$,B$) <> 0 AND IG = 0 THEN BEGIN      S$ = ARGS$(ARGØCNT)      TR$ = " "      GOSUB STRIPØTR$ØFROMØBEGINNING      GOSUB STRIPØCHARACTERS      ARGS$(ARGØCNT) = S$      ARGØCNT = ARGØCNT + 1    BEND : ELSE BEGIN      ARGS$(ARGØCNT) = ARGS$(ARGØCNT) + B$    BEND  NEXT AI  S$ = ARGS$(ARGØCNT)  TR$=" "  GOSUB STRIPØTR$ØFROMØBEGINNING  GOSUB STRIPØCHARACTERS  ARGS$(ARGØCNT) = S$  S$ = ARGSØLIST$  ' RESTORE S$  RETURN.REPLACEØVARSØANDØLABELS'-----------------------  ' -- REPLACE VARS & LABELS IN SOURCE STRING --  '    IN:   S$ = SOURCE STRING  '    OUT:  S$ = DEST STRING WITH REPLACED ITEMS    IF LEFT$(S$, 2) = "^^" THEN BEGIN    S$ = RIGHT$(S$,LEN(S$)-2)    RETURN  BEND  QUOTEØFLAG = 0  A$ = ""  C$ = ""  STRUCTØIDX = 0  TG = 0  CX$ = "?<>=+-#*/^,.:;() "  D$ = CX$  FOR II = 1 TO LEN(S$)    B$ = MID$(S$, II, 1)    IF B$ = ":" AND QUOTEØFLAG = 0 THEN BEGIN      STRUCTØIDX = 0      RI = 0    BEND    IF STRUCTØIDX AND B$ = "(" THEN BEGIN      RI = 0      D$ = CX$    BEND    IF STRUCTØIDX AND B$=")" THEN BEGIN      RI = -1      D$ = CX$ + "DPUB"    BEND    IF B$ = DBLØQUOTE$ THEN BEGIN      QUOTEØFLAG = ABS(QUOTEØFLAG - 1)      IF QUOTEØFLAG = 1 THEN BEGIN        GOSUB CHECKØTOKENØFORØSUBBING        A$ = A$ + C$        C$ = ""      BEND : ELSE BEGIN        A$ = A$ + B$        B$ = ""      BEND    BEND    IF QUOTEØFLAG = 1 THEN BEGIN      A$ = A$ + B$      GOTO RVALØSKIP    BEND    IF INSTR(D$, B$) <> 0 THEN BEGIN      GOSUB CHECKØTOKENØFORØSUBBING      A$ = A$ + C$      C$ = ""      IF B$ = " " THEN B$ = ""      A$ = A$ + B$    BEND : ELSE BEGIN      C$ = C$ + B$    BEND.RVALØSKIP  NEXT  GOSUB CHECKØTOKENØFORØSUBBING   S$ = A$ + C$  RETURN  END.CHECKØTOKENØFORØSUBBING'-----------------------  IF C$ = "" OR C$ = "_" THEN RETURN  IF VAL(C$) <> 0 THEN BEGIN    TG = 0    RETURN  ' NEVER CHANGE NUMBERS  BEND  IF C$ = "0" THEN BEGIN    C$="."    RETURN  ' STUPID MS BASIC OPTIMIZATION  BEND  IF TG AND DZ = 0 THEN BEGIN    GOSUB MARKØC$ØLABEL    TG = 0    RETURN  ' REPLACE LABEL  BEND  IF C$ = "GOTO" THEN NEXTØLINEØFLAG = 1  IF C$ = "GOTO" OR C$ = "GOSUB" OR C$ = "TRAP" THEN BEGIN    TG = 1  BEND  DR = 0  ' DID REPLACE FLAG  IF LEFT$(C$, 1) = "$" THEN BEGIN    HX$ = MID$(C$, 2)    GOSUB CONVERTØHEX    RETURN  BEND  IF LEFT$(C$, 1) = "%" THEN BEGIN    BI$ = MID$(C$, 2)    GOSUB CONVERTØBINARY    RETURN  BEND  P$ = " " + C$ + " "  FOR T = 0 TO 6    IF INSTR(TOKENS$(T), P$) <> 0 THEN BEGIN      LC$=C$      GOSUB CHECKØIFØCOMMANDØTRIGGERSØSHITTYØSYNTAX      RETURN    BEND  NEXT  T$ = RIGHT$(C$, 1)  TY = ‘Ÿ–Ø“≈¡Ã  IF T$ = "%" THEN TY = ‘Ÿ–Ø…Œ‘  IF T$ = "$" THEN TY = ‘Ÿ–Ø”‘“  IF T$ = "&" THEN TY = ‘Ÿ–Ø¬Ÿ‘≈  FOR ID = 0 TO ELEMENTØCNT(TY)    IF C$ = VARØTABLE$(TY, ID) THEN BEGIN      GOSUB GENERATEØVARNAME      C$ = VN$ + TYPEØIDENT$(TY)      ID = ELEMENTØCNT(TY)      DR = 1    BEND  NEXT ID  IF DR = 1 THEN RETURN  FOR ID = 0 TO ELEMENTØCNT(‘Ÿ–Øƒ≈∆)  ' CHECK DEFINES TABLE TOO    IF C$ = VARØTABLE$(‘Ÿ–Øƒ≈∆, ID) THEN BEGIN      C$ = DEFINEØVAL$(ID)      RETURN    BEND  NEXT ID  CI = -1  FOR ID = 0 TO STRUCTØIDX - 1  ' CHECK STRUCT NAMES    IF C$ = STRUCTØNAME$(ID) THEN BEGIN      GOSUB CHECKØFORØCREATIONØOFØSTRUCTØOBJECT      CI = ID      ID = STRUCTØIDX - 1  ' CREATE NEW STRUCT OBJECT    BEND  NEXT ID  IF CI <> -1 THEN BEGIN    RETURN  BEND: ELSE BEGIN    IF ASC(C$) = 222 THEN RETURN  ' PI  BEND  IF INSTR(DUMBØCMDS$, LC$) <> 0 AND (C$ = "R" OR C$ = "P" OR C$ = "U8" OR C$ = "W") THEN BEGIN    RETURN  BEND.UNRESOLVEDØC$  PARSERØERROR$ = "?UNRESOLVED IDENTIFIER: '" + C$ + "' IN LINE " + STR$(SRCØLINENO)  SLEEP 1  GOTO RETURNØTOØEDITORØWITHØERROR  RETURN.CHECKØIFØCOMMANDØTRIGGERSØSHITTYØSYNTAX'---------------------------------------  ' CHECK IF COMMAND TRIGGERS SHITTY SYNTAX MODE  ' TODO: COMPARE UBIK'S LOGIC HERE VERSUS MY OWN 4079 LC$="DOPEN" LOGIC  RETURN.MARKØC$ØLABEL'-------------  C$ = MK$ + C$ + MK$  RETURN.SWAPØOUTØLABELØINØC$ØFORØLINENO'-------------------------------  DR = 0  FOR ID = 0 TO LABELØCNT - 1    IF C$ = LABELØNAME$(ID) THEN BEGIN      C$ = STR$(LABELØLINENO(ID))      ID = LABELØCNT      DR = 1    BEND  NEXT ID  IF DR THEN RETURN  PARSERØERROR$ = "?UNRESOLVED LABEL: '" + C$ + "' IN LINE" + STR$(MAPØDESTØTOØSRCØLINENO%(CURØDESTØLINENO - 1))  SLEEP 1  GOTO RETURNØTOØEDITORØWITHØERROR  RETURN.CONVERTØBINARY'--------------  BR = 0  ' RESULT  FOR B = 0 TO LEN(BI$) - 1    BC$ = MID$(BI$, LEN(BI$) - B, 1)    IF BC$ <> "1" AND BC$ <> "0" THEN BEGIN      BANK 4      POKE $FF08, 132      GOTO UNRESOLVEDØC$    BEND    IF BC$="1" THEN BR=BR+BINØCONV(B)  NEXT B  C$ = MID$(STR$(BR), 2)  RETURN  STOP.CONVERTØHEX'-----------  TRAP ILLEGALØHEXØHANDLER  VL = DEC(HX$)  C$ = MID$(STR$(VL), 2)  TRAP  RETURN.ILLEGALØHEXØHANDLER'-------------------  TRAP  BANK 4  POKE $FF08, 131  ' SET ILLEGAL HEX  GOTO UNRESOLVEDØC$  ' JUMP INTO ERROR HANDLER.GENERATEØVARNAME'----------------  ' GENERATE VARNAME FROM INDEX  IF ID < 26 THEN BEGIN    VN$ = CHR$(65 + ID)    RETURN  BEND  N2 = MOD(ID, 26)  N1 = INT(ID / 26) - 1  VN$ = CHR$(65 + N1) + CHR$(65 + N2)  IF VN$="DO" THEN VN$="D1"  ' AVOID ANY BASIC TERMS AS VAR NAMES  IF VN$="GO" THEN VN$="G1"  IF VN$="TO" THEN VN$="T1"  IF VN$="DS" THEN VN$="D2"  IF VN$="DT" THEN VN$="D3"  IF VN$="EL" THEN VN$="E1"  IF VN$="ER" THEN VN$="E2"  IF VN$="FN" THEN VN$="F1"  IF VN$="IF" THEN VN$="I1"  RETURN  STOP.GETØFILENAME'------------  BANK 4  BA = $FF00  IF PEEK(BA+0) = ASC("S") AND PEEK(BA+1) = ASC("K") THEN BEGIN    VERBOSE = PEEK($FF07) AND 8    F$ = ""    A = BA + $10    DO WHILE PEEK(A) <> 0      F$ = F$ + CHR$(PEEK(A))      A = A + 1    LOOP    IF PEEK($FF07) AND 1 THEN RETURN    PRINT "FILENAME? " + F$    PRINT "ë";  BEND  INPUT "FILENAME"; A$  IF A$ = "" THEN BEGIN    PRINT "NO FILENAME SET"    END  BEND  POKE BA, ASC("S")  POKE BA + 1, ASC("K")  FOR R = 1 TO 16    POKE BA + 8 + R - 1, ASC(MID$(A$, R, 1))  NEXT R  F$ = A$  RETURN.SAVEØFILENAME'-------------  AD = $FF30  BANK 4  FOR R = 0 TO 16    POKE AD + R, 0  NEXT R  IF OF$ <> "" THEN BEGIN    TF$ = OF$  BEND : ELSE BEGIN    TF$="ELEVEN.OUT"  BEND  FOR R = 1 TO LEN(TF$)    POKE AD + R - 1, ASC(MID$(TF$, R, 1))  NEXT R  RETURN.CHAINØEDITOR'------------  GET A$  IF A$ <> "" THEN BEGIN    INPUT ZZ    IF ZZ=1 THEN STOP  BEND  PRINT "ìEDMA 0,$D400,$8000000,$2001:NEW RESTORE"  PRINT "RUN";  ' LOAD '11.EDIT' FROM CACHE  BANK 128  POKE 208, 2      ' NO# OF CHARS IN KEYBOARD BUFFER  POKE 688, 13, 13 ' RETURN CHARS  END.ISØS$ØDEFINED'-------------  INSIDEØIFDEF = 1  FOR K = 0 TO ELEMENTØCNT(‘Ÿ–Øƒ≈∆)    IF VARØTABLE$(‘Ÿ–Øƒ≈∆, K) = S$ THEN BEGIN      INSIDEØIFDEF = 0    BEND  NEXT K  RETURN.READØINØSTRUCTØDETAILS'----------------------  CURRØSRCØLINE$ = MID$(CURRØSRCØLINE$, 9)  GOSUB READØNEXTØTOKEN  ' GET NEXT TOKEN IN S$  IF S$ = "" THEN BEGIN    PRINT "ERROR: NO STRUCT NAME FOUND"    SLEEP 1    RETURN  BEND  STRUCTØNAME$(STRUCTØIDX) = S$  STRUCTØVARS$(STRUCTØIDX) = CURRØSRCØLINE$  STRUCTØIDX = STRUCTØIDX + 1  RETURN.READØNEXTØTOKEN'---------------  ' READ NEXT TOKEN FROM CURRØSRCØLINE$ INTO S$  S$ = CURRØSRCØLINE$  GOSUB STRIPØTR$ØFROMØBEGINNING  GOSUB STRIPØCHARACTERS  CURRØSRCØLINE$ = S$  SF$ = " "  SF = 0  IF LEFT$(S$, 1) = DBLØQUOTE$ THEN BEGIN    SF$ = DBLØQUOTE$ + ", "    SF = 2  BEND  A = INSTR(CURRØSRCØLINE$, SF$)  IF A <> 0 THEN BEGIN    S$ = MID$(CURRØSRCØLINE$, 1, INSTR(CURRØSRCØLINE$, SF$) + SF - 1)    CURRØSRCØLINE$ = MID$(CURRØSRCØLINE$, INSTR(CURRØSRCØLINE$, SF$) + SF + 1)  BEND  IF A = 0 THEN BEGIN    S$ = CURRØSRCØLINE$    CURRØSRCØLINE$ = ""  BEND  RETURN.READØNEXTØLINE'--------------  ' READ NEXT LINE INTO CURRØSRCØLINE$  BANK 0  CURØLINEØLEN = PEEK(CURRØATTICØADDR)  CURRØSRCØLINE$ = LEFT$(BLANKØLINE$, CURØLINEØLEN)  SRCØLINEØPTR = POINTER(CURRØSRCØLINE$)  SRCØLINEBUFFØPTR = $10000 + WPEEK(SRCØLINEØPTR + 1)  CURRØATTICØADDR = CURRØATTICØADDR + 1  IF CURØLINEØLEN <> 0 THEN BEGIN    EDMA 0, CURØLINEØLEN, CURRØATTICØADDR, SRCØLINEBUFFØPTR    CURRØATTICØADDR = CURRØATTICØADDR + CURØLINEØLEN  BEND  CURØSRCØLINENO = CURØSRCØLINENO + 1  TR$ = WHITESPACE$  S$ = CURRØSRCØLINE$  GOSUB STRIPØTR$ØFROMØBEGINNING  CURRØSRCØLINE$ = S$  QUOTEØFLAG = 0    ' QUOTES ON  CUTØTAILØIDX = 0  ' CUT CHARS FROM TAIL  BANK 1  RETURN.SINGLEØQUOTEØCOMMENTØTRIM'-------------------------  CUTØTAILØIDX = INSTR(CURRØSRCØLINE$, "'")  ' SINGLE QUOTE  IF CUTØTAILØIDX <> 0 THEN BEGIN    IF INSTR(CURRØSRCØLINE$, DBLØQUOTE$) <> 0 THEN BEGIN  ' DOUBLE QUOTE      CUTØTAILØIDX = 0      BANK 0      CURØLINEØLENØMINUSØONE = PEEK(SRCØLINEØPTR) - 1      CURØLINEBUFFØADDR = WPEEK(SRCØLINEØPTR + 1)      BANK 1      FOR R = 0 TO CURØLINEØLENØMINUSØONE        CHR = PEEK(CURØLINEBUFFØADDR + R)        IF CHR = DBLØQUOTEØCHAR THEN BEGIN          QUOTEØFLAG = ABS(QUOTEØFLAG - 1)        BEND : ELSE BEGIN          IF CHR = SNGLØQUOTEØCHAR AND QUOTEØFLAG=0 THEN BEGIN            CUTØTAILØIDX = R + 1            R = 999          BEND        BEND      NEXT    BEND    IF CUTØTAILØIDX THEN BEGIN      CURRØSRCØLINE$ = LEFT$(CURRØSRCØLINE$, CUTØTAILØIDX - 1)    BEND  BEND  RETURN.PARSEØPREPROCESSORØDIRECTIVE'----------------------------  IF INSTR(CURRØSRCØLINE$, "IFDEF") = 2 THEN BEGIN    S$ = MID$(CURRØSRCØLINE$, 8)    GOSUB ISØS$ØDEFINED    DELETEØLINEØFLAG = 1  BEND  IF INSTR(CURRØSRCØLINE$, "ENDIF") = 2 THEN BEGIN    INSIDEØIFDEF = 0    DELETEØLINEØFLAG = 1  BEND  IF INSTR(CURRØSRCØLINE$, "DEFINE") = 2 THEN BEGIN    DEFINEØFLAG = 1    GOSUB DECLAREØS$ØVAR    DEFINEØFLAG = 0  BEND  IF INSTR(CURRØSRCØLINE$, "DECLARE") = 2 THEN BEGIN    DEFINEØFLAG = 0    GOSUB DECLAREØS$ØVAR   BEND  IF INSTR(CURRØSRCØLINE$,"OUTPUT")=2 THEN BEGIN    GOSUB SETØOUTPUTØFILE  BEND  IF INSTR(CURRØSRCØLINE$,"STRUCT")=2 THEN BEGIN    GOSUB READØINØSTRUCTØDETAILS    DELETEØLINEØFLAG = 1  BEND  RETURN.CHECKØFORØCREATIONØOFØSTRUCTØOBJECT'-----------------------------------  CO$ = S$  CURRØSRCØLINE$ = S$  ZZ = -1  ' PRESERVE ORIGINAL STRING  GOSUB READØNEXTØTOKEN  ' READ NEXT TOKEN FROM CURRØSRCØLINE$ INTO S$  FOR ZI = 0 TO STRUCTØIDX    IF S$=STRUCTØNAME$(ZI) THEN BEGIN      ZZ = ZI      ZI = STRUCTØIDX    BEND  NEXT ZI  IF ZZ = -1 THEN BEGIN    CURRØSRCØLINE$ = CO$    S$ = CO$    RETURN  BEND  GOSUB READØNEXTØTOKEN  SK$ = S$  ' GET STRUCT OBJECT NAME  BL = INSTR(SK$, "(")  ' *** FOUND IT, SO MAKE DIM'S FOR EACH MEMBER VAR  S$ = STRUCTØVARS$(ZZ)  GOSUB PARSEØARGUMENTS  ' PARSE ARGS INTO ARGS$(), ARGØCNT  ZZ = 1  SZ = 0  FOR ZI = 0 TO ARGØCNT    IF ARGS$(ZI) <> "" THEN BEGIN      PRINT "ARGS$(";ZI;")=";ARGS$(ZI)      IF BL = 0 THEN BEGIN        S$ = SK$ + "Ø" + ARGS$(ZI)        PRINT "STRUCT: "; S$        P$ = S$        GOSUB PARSEØDECLAREDØVAR       BEND      IF BL <> 0 THEN BEGIN        S$ = LEFT$(SK$, BL - 1) + "Ø" + ARGS$(ZI) + MID$(SK$, BL)        PRINT "STRUCT: ";S$        P$ = S$        GOSUB PARSEØDECLAREDØVAR        STRUCTØFIELDS$(SZ) = P$        SZ = SZ + 1      ' IF NEXTØLINE$<>"" THEN DELETEØLINEØFLAG=0:CURRØSRCØLINE$="^^"+NEXTØLINE$:ELSE DELETEØLINEØFLAG=1    BEND  NEXT ZI  S$ = NEXTØLINE$  GOSUB SAFEØADDØTOØCURRENTØORØNEXTØLINE  NEXTØLINE$ = ""  ' SAFE ADD CURRØDESTØLINE$+S$ TO CURRENT DESTØLINE$(DESTØLINENO)  GOSUB READØNEXTØTOKEN  IF S$ <> "=" THEN BEGIN    CURRØSRCØLINE$=""    RETURN  BEND  GOSUB READØNEXTØTOKEN  SZ=0  SR=0  SM=0  ' READ NEXT TOKEN FROM CURRØSRCØLINE$ INTO S$  DO WHILE S$ <> ""    IF S$ = "_" THEN BEGIN      SRCØLINENO = SRCØLINENO + 1      GOSUB READØNEXTØLINE      GOTO CFCOSOØSKIP  ' READ NEXT LINE    BEND    IF SM = 0 AND S$ <> "[" THEN BEGIN      PRINT "ERROR: EXPECTED ["      SLEEP 1      STOP    BEND    IF SM = 0 AND S$ = "[" THEN BEGIN      SM = 1      GOTO CFCOSOØSKIP    BEND    IF SM = 1 AND S$ <> "[" AND S$ <> "]" THEN BEGIN      PRINT "ERROR: EXPECTED [ OR ]"      SLEEP 1      STOP    BEND    IF SM = 2 THEN BEGIN      IF LEFT$(S$, 1) = "]" THEN BEGIN        SR = SR + 1        SZ = 0        SM = 1        S$ = ""        GOTO CFCOSOØNEXTROW  ' NEXT ROW      BEND      ' IF LEFT$(S$, 1) = DBLØQUOTE$ THEN BEGIN      ' SS$ = S$      ' TR$ = ""      ' DO WHILE RIGHT$(SS$, 2) <> (DBLØQUOTE$ + ",")      '   GOSUB READØNEXTØTOKEN      '   SS$ = SS$ + S$      '   PRINT SS$      ' LOOP      ' S$ = SS$      ' TR$ = WHITESPACE$      ' STOP      IF RIGHT$(S$, 1) = "," THEN BEGIN        S$ = LEFT$(S$, LEN(S$) - 1)      BEND      S$ = STRUCTØFIELDS$(SZ) + "(" + STR$(SR) + ")=" + S$      GOSUB REPLACEØVARSØANDØLABELS      GOSUB SAFEØADDØTOØCURRENTØORØNEXTØLINE      S$ = ""      SZ = SZ + 1  ' SAFE ADD TO DESTØLINE$(DESTØLINENO).CFCOSOØNEXTROW    BEND    IF SM = 1 AND S$ = "[" THEN BEGIN      SM = 2      SZ = 0    BEND    IF SM = 1 AND S$ = "]" THEN BEGIN      SM = 0    BEND.CFCOSOØSKIP    GOSUB READØNEXTØTOKEN  ' READ NEXT TOKEN FROM CURRØSRCØLINE$ INTO S$  LOOP  S$ = ""  CURRØSRCØLINE$ = ""  NEXTØLINE$ = ""  ZZ$ = "Z"  RETURN.CHECKØFORØCONTINUEØONTOØNEXTØLINE'---------------------------------  IF RIGHT$(CURRØDESTØLINE$, 1) = "_" THEN BEGIN    CURRØDESTØLINE$ = LEFT$(CURRØDESTØLINE$, LEN(CURRØDESTØLINE$) - 1)    NEXTØLINEØFLAG = 0    CONTØNEXTØLINEØFLAG = 1  BEND: ELSE BEGIN    CONTØNEXTØLINEØFLAG = 0  BEND  RETURN.SAFEØADDØTOØCURRENTØORØNEXTØLINE'--------------------------------  ' --- SAFE ADD CURRØDESTØLINE$+S$ TO CURRENT OR NEXT DESTØLINE$(DESTØLINENO)  IF LEN(CURRØDESTØLINE$) + LEN(S$) + LEN(STR$(DESTØLINENO)) >= 159 THEN BEGIN    NEXTØLINEØFLAG=1  BEND  IF ZZ$ <> "" THEN BEGIN    S$ = ""    ZZ$ = ""    RETURN  ' FORCE S$ TO EMPTY  BEND  IF NEXTØLINEØFLAG = 1 THEN BEGIN    DESTØLINE$(DESTØLINENO) = CURRØDESTØLINE$    CURRØDESTØLINE$ = S$    MAPØDESTØTOØSRCØLINENO%(DESTØLINENO) = SRCØLINENO    DESTØLINENO = DESTØLINENO + 1    NEXTØLINEØFLAG = 0  BEND : ELSE BEGIN  ' -- ADD TO CURRØDESTØLINE$    IF CURRØDESTØLINE$ <> "" AND CONTØNEXTØLINEØFLAG = 0 AND RIGHT$(CURRØDESTØLINE$,1) <> ":" THEN BEGIN      CURRØDESTØLINE$ = CURRØDESTØLINE$ + ":"    BEND        CURRØDESTØLINE$ = CURRØDESTØLINE$ + S$  BEND  IF VERBOSE THEN PRINT "<<" DESTØLINENO; S$  RETURN.DUMPØVARS'---------  FOR TY = 0 TO 3    FOR ID = 0 TO ELEMENTØCNT(TY)      GOSUB GENERATEØVARNAME  ' GET VN$ (OPTIMISED VAR NAME)      PRINT#1, STR$(CURØDESTØLINENO) + " REM " + VARØTABLE$(TY,ID) + " = :" + VN$ + TYPEØIDENT$(TY) + ":"      CURØDESTØLINENO = CURØDESTØLINENO + 1    NEXT ID  NEXT TY  RETURN